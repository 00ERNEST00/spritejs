(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{531:function(n,e,r){"use strict";r.r(e),e.default="(function () {\n  const {Scene, Matter} = spritejs;\n  const scene = new Scene('#paper', {\n    viewport: ['auto', 'auto'],\n    resolution: [800, 600],\n    stickMode: 'width',\n  });\n  const fglayer = scene.layer('fglayer');\n\n  const {Engine, World, Render, Runner, Common, Composites, Mouse, MouseConstraint, Bodies} = Matter;\n\n  // create engine\n  const engine = Engine.create(),\n    world = engine.world;\n\n  // create renderer\n  const render = Render.create({\n    layer: fglayer,\n    engine,\n    options: {\n      showAngleIndicator: true,\n      background: '#fff',\n      wireframes: false,\n    },\n  });\n\n  Render.run(render);\n\n  // create runner\n  const runner = Runner.create();\n  Runner.run(runner, engine);\n\n  // add bodies\n  const stack = Composites.stack(20, 20, 10, 5, 0, 0, (x, y) => {\n    let sides = Math.round(Common.random(1, 8));\n\n    // triangles can be a little unstable, so avoid until fixed\n    sides = (sides === 3) ? 4 : sides;\n\n    // round the edges of some bodies\n    let chamfer = null;\n    if(sides > 2 && Common.random() > 0.7) {\n      chamfer = {\n        radius: 10,\n      };\n    }\n\n    const width = 64;\n    switch (Math.round(Common.random(0, 1))) {\n      case 0:\n        if(Common.random() < 0.6) {\n          return Bodies.rectangle(x, y, Common.random(25, 50), Common.random(25, 50), {chamfer});\n        } if(Common.random() < 0.8) {\n          return Bodies.rectangle(x, y, Common.random(80, 120), Common.random(25, 30), {chamfer});\n        }\n\n        return Bodies.rectangle(x, y, width, width, {\n          chamfer,\n          render: {\n            sprite: {\n              attrs: {\n                textures: {\n                  src: 'https://p5.ssl.qhimg.com/t01bd0523f7bc9241c2.png',\n                  srcRect: [32, 32, 64, 64],\n                },\n                size: [width, width],\n              },\n            },\n          },\n        });\n      case 1:\n        return Bodies.polygon(x, y, sides, Common.random(25, 50), {chamfer});\n      default:\n        break;\n    }\n  });\n\n  World.add(world, stack);\n\n  World.add(world, [\n    // walls\n    Bodies.rectangle(400, 0, 800, 50, {isStatic: true}),\n    Bodies.rectangle(400, 600, 800, 50, {isStatic: true}),\n    Bodies.rectangle(800, 300, 50, 600, {isStatic: true}),\n    Bodies.rectangle(0, 300, 50, 600, {isStatic: true}),\n  ]);\n\n  // add mouse control\n  const mouse = Mouse.create(render.canvas),\n    mouseConstraint = MouseConstraint.create(engine, {\n      mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false,\n        },\n      },\n    });\n\n  World.add(world, mouseConstraint);\n\n  // keep the mouse in sync with rendering\n  render.mouse = mouse;\n}());\n"}}]);